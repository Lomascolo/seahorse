# Copyright (c) 2015, CodiLime Inc.

import commons
import EntityStorageClient
import json


class ReportChecker(object):
  """
  Verifies that reports that are generated by experiment
  are stored in entity storage, and that they are compatible
  with provided patterns.

  Currently, checking following report features are supported:
    * name of whole report
    * names of distributions
    * names of tables
  """

  def __init__(self):
    self._entity_storage_client = EntityStorageClient.EntityStorageClient()

  def check_experiment_reports(self, experiment, path_to_pattern):
    """ Receives object describing experiment and path to json file containing pattern for reports."""
    with open(path_to_pattern) as f:
      content = f.read()
    pattern = json.loads(content)
    self._check_experiment_reports(experiment, pattern)

  def _check_experiment_reports(self, experiment, reports_pattern):
    """
    Receives object describing experiment and object describing pattern for reports.
    Pattern for reports should be a dictionary from node id to list of expected reports patterns.
    """
    nodes_states = experiment['state']['nodes']
    nodes_results = {node_id: node_state['results'] for node_id, node_state in nodes_states.items()}
    for node_id, results_patterns in reports_pattern.items():
      self._assert_json_dict_key(nodes_results, node_id)
      node_results = nodes_results[node_id]
      if len(node_results) != len(results_patterns):
        raise AssertionError(
            "There should be {} results instead of {} for node '{}'."\
            .format(len(results_patterns), len(node_results)))
      for entity_id, result_pattern in zip(node_results, results_patterns):
        report = self._entity_storage_client.get_entity_report(entity_id)
        print '*INFO* checking node {}'.format(node_id)
        self.check_report_matches_pattern(report, result_pattern)

  def _validate_table(self, expected_table, report_table):
    fields_to_check = ['name', 'columnNames', 'values']
    for field in fields_to_check:
      if field in expected_table:
        self._assert_json_dict_value(report_table, field, expected_table[field])

  def check_report_matches_pattern(self, report, pattern):
    name_field = 'name'
    distiributions_field = 'distributions'
    tables_field = 'tables'
    distributions_keys_field = 'distiributions_keys'

    if name_field in pattern:
      self._assert_json_dict_value(report, name_field, pattern[name_field])

    if distributions_keys_field in pattern:
      self._assert_json_dict_key(report, distributions_field)
      distributions_object = report[distributions_field]
      expected_keys = pattern[distiributions_keys_field]
      for expected_key in expected_keys:
        self._assert_json_dict_key(distributions_object, expected_key)

    if tables_field in pattern:
      expected_tables = pattern[tables_field]
      self._assert_json_dict_key(report, tables_field)
      report_tables = report[tables_field]
      for expected_table in expected_tables:
        table_name = expected_table[name_field]
        self._assert_json_dict_key(report_tables, table_name)
        self._validate_table(expected_table, report_tables[table_name])

  def _assert_json_dict_key(self, json_dict, key):
    if key not in json_dict:
      raise AssertionError(
          "No key '{}' found in json object:\n{}"\
          .format(key, json.dumps(json_dict, indent=4)))

  def _assert_json_dict_value(self, json_dict, key, expected_value):
    self._assert_json_dict_key(json_dict, key)
    actual_value = json_dict[key]
    if actual_value != expected_value:
      raise AssertionError(
          "Value at key '{}' was '{}' instead of expected '{}' in json object:\n{}"\
          .format(key, actual_value, expected_value, json.dumps(json_dict, indent=4)))
