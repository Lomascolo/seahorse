server {
  host = ${server.host}
  port = ${server.port}
  startup.timeout = ${server.startup.timeout}
}

auth-service {
  endpoint = ${auth-service.endpoint}
  identity = ${auth-service.identity}
  password = ${auth-service.password}
  timeout {
    connection = ${auth-service.timeout.connection}
    socket = ${auth-service.timeout.socket}
  }
}

roles {
  experiments {
    get = "experiments:get"
    update = "experiments:update"
    create = "experiments:create"
    list = "experiments:list"
    delete = "experiments:delete"
    launch = "experiments:launch"
    abort = "experiments:abort"
  }
}

experiments.api.prefix = "v1/experiments"
operations.api.prefix = "v1/operations"
models.api.prefix = "v1/models"

runningexperiments.timeout = ${runningexperiments.timeout}
runningexperiments.refresh.interval = ${runningexperiments.refresh.interval}
runningexperiments.refresh.timeout = ${runningexperiments.refresh.timeout}

entitystorage.label = "default"

runningexperiments.override.with.mock = ${runningexperiments.override.with.mock}
runningexperiments.mock {
  failureprobability = ${runningexperiments.mock.failureprobability}
  tickdelay = ${runningexperiments.mock.tickdelay}
}

entityStorage {
  actorSystemName = "root-actor-system"
  hostname = ${entityStorage.hostname}
  port = ${entityStorage.port}
  actorName = "EntitiesApiActor"
  timeoutSeconds = ${entityStorage.timeoutSeconds}

  client {
    localAddress = ${entityStorage.client.localAddress}
    localPort = ${entityStorage.client.localPort}
  }
}

hdfs {
  hostname=${hdfs.hostname}
  port=${hdfs.port}
}
