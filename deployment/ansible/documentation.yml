# Copyright (c) 2015, CodiLime Inc.

---
- name: Builds documentation docker image
  hosts: localhost
  vars_files:
    - vars/docker.yml
  roles:
    - documentation

- name: Exports documentation docker image
  hosts: localhost
  vars_files:
    - vars/docker.yml
  tasks:
    - include: tasks/save_docker_image.yml docker_image={{ds_documentation_docker_image}} download_dir="{{ds_documentation_download_dir}}"

- name: Copies documentation docker image
  hosts: frontend
  user: ubuntu
  sudo: yes
  vars_files:
    - vars/docker.yml
  tasks:
    - name: Assures docker dir exists
      file: path={{ds_documentation_download_dir}} state=directory
    - include: tasks/copy_docker_image.yml docker_tar_image={{ds_documentation_docker_image}}-docker.tar download_dir="{{ds_documentation_download_dir}}"

- name: Imports documentation docker image
  hosts: frontend
  user: ubuntu
  sudo: yes
  vars_files:
    - vars/docker.yml
  tasks:
    - include: tasks/load_docker_image.yml docker_image={{ds_documentation_docker_image}}

- name: Runs frontend image
  hosts: frontend
  user: ubuntu
  sudo: yes
  vars_files:
    - vars/docker.yml
  tasks:
    - name: Register running Docker containers
      register: docker_containers
      command: docker ps -a

    - name: Remove previous container
      command: docker rm -f {{ds_documentation_docker_image}}
      when: docker_containers.stdout.find('{{ds_documentation_docker_image}}') != -1

    - name: Run frontend container
      docker:
        name: "{{ds_documentation_docker_image}}"
        image: "{{ds_documentation_docker_image}}"
        state: started
        restart_policy: always
        ports:
          - "{{ds_documentation_ip}}:{{ds_documentation_port}}:80"
